#!/usr/bin/env python

import sys
import argparse
import logging
import phaul.iters
import phaul.connection
import phaul.images
import phaul.criu_api
import phaul.htype

# Usage idea
# p.haul <type> <id> --fdrpc <fd> --fdmem <fd> --fdfs <fd>
#
# p.haul work over existing connections specified via command line arguments
# as file descriptors. Three arguments required - --fdrpc for rpc calls,
# --fdmem for c/r images migration and --fdfs for disk migration. For testing
# purposed p.haul-wrap helper script can be used which establish required
# connections with target host and call p.haul or p.haul-service.
#
# E.g.
# p.haul vz 100 --fdrpc 3 --fdmem 4 --fdfs 5
# p.haul lxc myct --fdrpc 3 --fdmem 4 --fdfs 5
#


def log_uncaught_exception(type, value, traceback):
	logging.error(value, exc_info=(type, value, traceback))


# Initialize arguments parser
parser = argparse.ArgumentParser("Process HAULer")
parser.set_defaults(pre_dump=phaul.iters.PRE_DUMP_AUTO_DETECT)
parser.add_argument("type", choices=phaul.htype.get_haul_names(),
	help="Type of hat to haul, e.g. vz, lxc, or docker")
parser.add_argument("id", help="ID of what to haul")
parser.add_argument("--to", help="IP where to haul")
parser.add_argument("--fdrpc", type=int, required=True, help="File descriptor of rpc socket")
parser.add_argument("--fdmem", type=int, required=True, help="File descriptor of memory socket")
parser.add_argument("--fdfs", type=int, required=True, help="File descriptor of fs socket")
parser.add_argument("-v", default=phaul.criu_api.def_verb, type=int, dest="verbose", help="Verbosity level")
parser.add_argument("--keep-images", default=False, action='store_true', help="Keep images after migration")
parser.add_argument("--dst-rpid", default=None, help="Write pidfile on restore")
parser.add_argument("--img-path", default=phaul.images.def_path,
	help="Directory where to put images")
parser.add_argument("--pid-root", help="Path to tree's FS root")
parser.add_argument("--force", default=False, action='store_true', help="Don't do any sanity (CPU compat) checks")
parser.add_argument("--log-file", help="Write logging messages to specified file")
parser.add_argument("-j", "--shell-job", default=False, action='store_true',
	help="Allow migration of shell jobs")
parser.add_argument('--no-pre-dump', dest='pre_dump', action='store_const',
	const=phaul.iters.PRE_DUMP_DISABLE, help='Force disable pre-dumps')
parser.add_argument('--pre-dump', dest='pre_dump', action='store_const',
	const=phaul.iters.PRE_DUMP_ENABLE, help='Force enable pre-dumps')

# Parse arguments
args = parser.parse_args()

# Configure logging
logging.basicConfig(filename=args.log_file, filemode="w", level=logging.INFO,
	format="%(asctime)s.%(msecs)03d: %(message)s", datefmt="%H:%M:%S")

# Setup hook to log uncaught exceptions
sys.excepthook = log_uncaught_exception

logging.info("Starting p.haul")

# Establish connection
connection = phaul.connection.establish(args.fdrpc, args.fdmem, args.fdfs)

# Start the migration
ph_type = args.type, args.id
worker = phaul.iters.phaul_iter_worker(ph_type, connection)
worker.set_options(vars(args))
worker.start_migration()

# Close connection
connection.close()
